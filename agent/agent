# =====================================
# agent/agent.py ‚Äì Passive Voice Agent (with VoiceOutput)
# =====================================

from core.intent_parser import detect_intent
from core.memory import PerceptDB
from core.search import PerceptSearch
from core.percept import Percept
from llm.planner import breakdown_goal
from core.summarizer import summarize_day
from utils.speech_input import listen_and_transcribe
from utils.context import get_context
from utils.voice_output import VoiceOutput
import time


def handle_passive_input(user_input, db, search, speaker):
    intent_data = detect_intent(user_input)
    intent = intent_data.get("intent")
    params = intent_data.get("parameters", intent_data)

    if intent == "reminder":
        task = params.get("task", "")
        time_str = params.get("time", "soon")
        with open("reminders.txt", "a") as f:
            f.write(f"‚è∞ Reminder: {task} at {time_str}\n")
        speaker.say(f"Okay, I'll remind you to {task} at {time_str}.")

    elif intent == "note":
        p = Percept(text=params["content"], tags=["note"])
        db.insert(p)
        speaker.say("Got it. Note saved.")

    elif intent == "journal":
        p = Percept(text=params["content"], tags=["journal"])
        db.insert(p)
        speaker.say("Journal entry added.")

    elif intent == "recall":
        results = search.search(params["query"])
        if results:
            speaker.say("Here's what I found:")
            for _, text in results:
                speaker.say(text)
        else:
            speaker.say("I couldn't find anything related.")

    elif intent == "summary":
        speaker.say("Here's your daily summary:")
        summarize_day()

    elif intent == "goal_breakdown":
        breakdown_goal(params["goal"])

    elif intent == "plan_day":
        goal = params.get("goal", "your schedule")
        speaker.say(f"Planning your day around {goal}.")

    else:
        speaker.say("I'm still learning to handle that request.")


if __name__ == "__main__":
    db = PerceptDB()
    search = PerceptSearch()
    search.preload(db)
    speaker = VoiceOutput()

    print("[ü§ñ Cognix+ Passive Agent Started ‚Äì Listening continuously]")
    speaker.say("Cognix agent activated and listening.")

    while True:
        user_input = listen_and_transcribe()
        if user_input:
            context = get_context()
            print(f"[‚è±Ô∏è Context]: {context['time_of_day']} on {context['day']}, recent: {', '.join(context['recent_keywords'])}")
            handle_passive_input(user_input, db, search, speaker)
        time.sleep(2)
